# Pre-commit hooks for ai-companion
# Install: pip install pre-commit && pre-commit install

repos:
  # Lua formatting (optional - will use stylua if available)
  - repo: local
    hooks:
      - id: lua-format
        name: lua-format
        entry: bash
        language: system
        files: \.lua$
        args:
          - -c
          - |
            if command -v stylua >/dev/null 2>&1; then
              stylua "$@"
            elif command -v luaformatter >/dev/null 2>&1; then
              luaformatter --indent-width=2 --continuation-indent-width=2 "$@"
            else
              echo "üí° No Lua formatter found. Install stylua for auto-formatting:"
              echo "   cargo install stylua"
              echo "   or run: bash setup-dev.sh"
              echo "‚úÖ Skipping formatting (not required)"
            fi
        pass_filenames: true

  - repo: local
    hooks:
      # Lua syntax and linting check
      - id: luacheck
        name: luacheck
        entry: bash
        language: system
        files: \.lua$
        args:
          - -c
          - |
            if ! command -v luacheck >/dev/null 2>&1; then
              echo "‚ö†Ô∏è luacheck not found. Install with:"
              echo "   luarocks install luacheck"
              echo "   or run: bash setup-dev.sh"
              exit 0
            fi
            luacheck --config .luacheckrc "$@"
        pass_filenames: true

      # Lua syntax check
      - id: lua-syntax
        name: lua-syntax-check
        entry: bash
        language: system
        files: \.lua$
        args:
          - -c
          - |
            if ! command -v lua >/dev/null 2>&1; then
              echo "‚ö†Ô∏è lua not found. Install with:"
              echo "   # Ubuntu/Debian: sudo apt install lua5.1"
              echo "   # macOS: brew install lua"
              echo "   or run: bash setup-dev.sh"
              exit 0
            fi
            for file in "$@"; do
              # Try syntax check but handle Neovim-specific modules gracefully
              if lua -e "local f = io.open('$file', 'r'); if f then local content = f:read('*all'); f:close(); if not content:match('require.*vim') and not content:match('require.*lazy') then loadstring(content) end end" 2>/dev/null; then
                echo "‚úÖ $file syntax OK"
              else
                echo "‚ö†Ô∏è $file syntax check failed (may require Neovim context)"
              fi
            done
        pass_filenames: true

  # Security checks
  - repo: local
    hooks:
      - id: check-secrets
        name: check-for-secrets
        entry: bash
        language: system
        files: \.(lua|sh|md)$
        args:
          - -c
          - |
            # Check for real API key patterns
            if grep -E "(sk-[a-zA-Z0-9]{32,}|claude-[a-zA-Z0-9-]{20,})" "$@"; then
              echo "‚ùå Found potential API keys in staged files!"
              echo "üí° Use environment variables instead: export OPENAI_API_KEY='your-key'"
              exit 1
            fi

            # Check for hardcoded secrets
            if grep -E "(password|secret|token)\s*=\s*['\"][^'\"]{10,}" "$@" | grep -v -E "(your-|example-|test-|dummy-|placeholder)"; then
              echo "‚ö†Ô∏è Found potential hardcoded secrets in staged files!"
              exit 1
            fi

            echo "‚úÖ No secrets found in staged files"
        pass_filenames: true

  # General file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      # Basic file checks
      - id: trailing-whitespace
        exclude: \.md$
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-toml
      - id: check-json
      - id: check-merge-conflict
      - id: check-added-large-files
        args: [--maxkb=1000]

      # Shell script checks
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable

  # Markdown checks (optional)
  - repo: local
    hooks:
      - id: markdown-lint
        name: markdown-lint
        entry: bash
        language: system
        files: \.md$
        args:
          - -c
          - |
            if command -v markdownlint >/dev/null 2>&1; then
              markdownlint --config .markdownlint.yaml "$@"
            else
              echo "üí° markdownlint not found. Install for better docs:"
              echo "   npm install -g markdownlint-cli"
              echo "   or run: bash setup-dev.sh"
              echo "‚úÖ Skipping markdown linting (not required)"
            fi
        pass_filenames: true

  # Additional Lua checks
  - repo: local
    hooks:
      # Check for vim globals
      - id: lua-vim-check
        name: lua-vim-globals-check
        entry: bash
        language: system
        files: \.lua$
        args:
          - -c
          - |
            # Check for proper vim API usage
            if grep -n "vim\." "$@" | grep -v -E "(vim\.api|vim\.fn|vim\.cmd|vim\.keymap|vim\.notify|vim\.log|vim\.schedule|vim\.defer_fn|vim\.loop|vim\.uv|vim\.tbl_|vim\.split|vim\.inspect|vim\.deepcopy|vim\.[bowgt]o?)\."; then
              echo "‚ö†Ô∏è Found potentially incorrect vim API usage:"
              grep -n "vim\." "$@" | grep -v -E "(vim\.api|vim\.fn|vim\.cmd|vim\.keymap|vim\.notify|vim\.log|vim\.schedule|vim\.defer_fn|vim\.loop|vim\.uv|vim\.tbl_|vim\.split|vim\.inspect|vim\.deepcopy|vim\.[bowgt]o?)\."
              echo "üí° Use specific vim APIs like vim.api, vim.fn, etc."
            fi
        pass_filenames: true
