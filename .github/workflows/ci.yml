name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lua-check:
    name: Lua Lint & Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Lua
        uses: leafo/gh-actions-lua@v10
        with:
          luaVersion: "5.1"

      - name: Install Luarocks
        uses: leafo/gh-actions-luarocks@v4

      - name: Install luacheck
        run: luarocks install luacheck

      - name: Lint Lua files
        run: |
          find . -name "*.lua" -not -path "./.git/*" | xargs luacheck --config .luacheckrc

      - name: Check Lua syntax
        run: |
          find . -name "*.lua" -not -path "./.git/*" -exec lua -l {} \;

  install-test:
    name: Installation Test
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Test install script help
        run: bash install.sh --help

      - name: Test non-interactive install
        run: |
          mkdir -p ~/.config/nvim/lua/plugins
          bash install.sh --workspace-dir /tmp/test-workspace --non-interactive
          [ -d "/tmp/test-workspace" ] && echo "‚úÖ Workspace created"

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check README links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'

      - name: Validate Lua examples
        run: |
          # Extract and validate Lua code blocks from README
          awk '/```lua/,/```/' README.md | grep -v '```' | lua -c

  security:
    name: Security Check
    runs-on: ubuntu-latest
    env:
      # Set dummy API keys for testing
      OPENAI_API_KEY: sk-test1234567890abcdef1234567890abcdef
      ANTHROPIC_API_KEY: claude-test-1234567890abcdef
      TEST_SECRET: test-secret-123456789
    steps:
      - uses: actions/checkout@v4

      - name: Check for hardcoded secrets
        run: |
          echo "üîç Checking for hardcoded secrets..."

          # Check if any environment variable values appear in code
          secrets_found=false

          # Check against API key environment variables
          if [ -n "$OPENAI_API_KEY" ]; then
            if grep -r "$OPENAI_API_KEY" . --include="*.lua" --include="*.sh" --include="*.md" 2>/dev/null; then
              echo "‚ùå OPENAI_API_KEY found hardcoded in files!"
              secrets_found=true
            fi
          fi

          if [ -n "$ANTHROPIC_API_KEY" ]; then
            if grep -r "$ANTHROPIC_API_KEY" . --include="*.lua" --include="*.sh" --include="*.md" 2>/dev/null; then
              echo "‚ùå ANTHROPIC_API_KEY found hardcoded in files!"
              secrets_found=true
            fi
          fi

          # Check for real API key patterns (backup check)
          if grep -r -E "sk-[a-zA-Z0-9]{32,}" . --include="*.lua" --include="*.sh" --include="*.md" 2>/dev/null; then
            echo "‚ùå Found OpenAI API key pattern in code!"
            secrets_found=true
          fi

          if grep -r -E "claude-[a-zA-Z0-9-]{20,}" . --include="*.lua" --include="*.sh" --include="*.md" 2>/dev/null; then
            echo "‚ùå Found Anthropic API key pattern in code!"
            secrets_found=true
          fi

          # Check for other potential secrets
          if grep -r -E "(password|secret|token)\s*=\s*['\"][^'\"]{10,}" . --include="*.lua" --include="*.sh" 2>/dev/null | grep -v -E "(your-|example-|test-|dummy-|placeholder)"; then
            echo "‚ö†Ô∏è Found potential hardcoded secrets"
            secrets_found=true
          fi

          if [ "$secrets_found" = true ]; then
            echo ""
            echo "üí° Tip: Use environment variables instead:"
            echo "   export OPENAI_API_KEY='your-key'"
            echo "   export ANTHROPIC_API_KEY='your-key'"
            exit 1
          fi

          echo "‚úÖ No hardcoded secrets found"
